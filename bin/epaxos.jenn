Node {

    int self = 0;
    List replicas = [];

    List cmds = [];
    int instance_num = -1;

    func Init(me, peers) -> None {
        self = me; 
        instance_num = -1;

        for (i = 0; i < len(peers); i = i+1) {
            replicas = append(replicas, peers[i]);
            cmds = append(cmds, []);
        }
    }

    // TODO all right, there's gotta be a more elegant solution than this
    func TIMEOUT() -> bool {
        return {"type": "TIMEOUT"};
    }

    func NewEntry(cmd, key) -> bool {
        
        // 1: increment instance number iL <- iL + 1
        instance_num = instance_num + 1;
        var iL = 0;
        iL = instance_num;

        // 2: seq <- 1 + max({seq nums of all interfering i.e. dependency commands} UNION {0})
        // 3: deps <- InterfL
        var seq = 1;
        var deps = [];
        for (replica = 0; replica < len(cmds); replica = replica + 1) {
            deps = append(deps, {});
            for (inst_num = 0; inst_num < len(cmds[replica]); inst_num = inst_num + 1) {
                var log = {};
                log = cmds[replica][inst_num];
                if (("key" exists log) && (log["key"] == key)) {
                    deps[replica][inst_num] = {
                        "cmd": log["cmd"],
                        "seq": log["seq"],
                        "key": log["key"]
                    };
                    if (log["seq"] >= seq) {
                        seq = log["seq"] + 1;
                    }
                }
            }
        }

        // 4: cmdsL[L][iL] <- (cmd, seq, deps, pre-accepted)
        cmds[self] = append(cmds[self], 
            {   "cmd": cmd,
                "seq": seq,
                "deps": deps,
                "status": "PREACCEPTED",
                "key": key
            });
        
        // 5: send pre-accept(cmd, seq, deps, L.iL) to all other replicas in F, where F is a fast fast_quorum
        // that includes L
        var resps = {};
        for (i = 0; i < len(replicas); i = i+1) {
            if (i != self) {
                resps[replicas[i]] = rpc_async_call(i, PreAccept(self, cmd, key, seq, deps, iL));
            }
        }

        //resps["timeout"] = set_timeout();

        var fast_quorum = 0; // declaration
        fast_quorum = len(replicas)-1;
        var timedout = false;
        var fq_recvd = 1;
        var disagreed_resps = 0;
        var fast_path = true;

        var preaccept_resps = {};
        for (i = 0; (fq_recvd < fast_quorum)
                    && ((fq_recvd + disagreed_resps) < len(replicas))
                    && !timedout;
            i = 0) {
            await has_next_resp(resps);
            var any = {};
            any = next_resp(resps);

            // TODO there's some stuff here about checking the responses
            match(any["type"]) {
                case "PreAcceptOK":
                    if ((any["seq"] != seq) || (any["deps"] != deps)) {
                        disagreed_resps = disagreed_resps + 1;
                        if (disagreed_resps >= 2) {
                            // can only tolerate at most 1 disagreed response
                            fast_path = false;
                        }
                    } else {
                        // agreed--fast quorum path
                        fq_recvd = fq_recvd + 1; 
                    }
                    preaccept_resps[any["sender"]] = any;
                case "TIMEOUT":
                    timedout = true;
                default:
                    print("default_notkeyword");
            }
        }
        
        if (timedout) {
            print("timedout");
            print(key);
        } else if (fast_path) {
            cmds[self][iL]["status"] = "COMMITTED";
            for (i = 0; i < len(replicas); i = i + 1) {
                if (i != self) {
                    rpc_async_call(i, Commit(self, cmd, key, seq, deps, iL));
                } 
            }
        } else {
            // 13, 14: union of all deps, largest seq num
            for (sender, resp in preaccept_resps) {
                for (replica in replicas) {
                    replica_deps = resp["deps"][replica];
                    for (iNum, log_cmd in replica_deps) {
                        if (!(iNum exists (deps[replica]))) {
                            deps[replica][iNum] = log_cmd;
                        }
                    }
                }
                
                if (resp["seq"] > seq) {
                    seq = resp["seq"];
                }
            }

            // 15: run Paxos-Accept phase

            // 16: cmds[L][i] <- (cmd, seq, deps) at instance L.i
            cmds[self][iL]["seq"] = seq;
            cmds[self][iL]["deps"] = deps;
            cmds[self][iL]["status"] = "ACCEPTED"; 

            // 17: send Accept(cmd, seq, deps, L.i) to at least floor(N/2) other replicas
            var accept_resps = {};
            for (peer in replicas) {
                if (peer != self) {
                    accept_resps[peer] = rpc_async_call(peer, Accept(self, cmd, key, seq, deps, iL));
                }
            }

            // accept_resps["timeout"] = set_timeout();

            // 20: on receiving at least floor(N/2) AcceptOKs,
            // run commit phase for (cmd, seq, deps) at L.i
            recvd = 1;
            var majority = 0;
            majority = len(replicas) / 2;
            timedout = false;
            for (placeholder = 0; (recvd < majority) && !timedout; placeholder = 0) {
                await has_next_resp(accept_resps);
                var any = {};
                any = next_resp(accept_resps);

                match(any["type"]) {
                    case "AcceptOK":
                        recvd = recvd + 1;
                    case "TIMEOUT":
                        timedout = true;
                    default: 
                        print("defaulted_accepted");
                }
            }

            if (timedout) {
                print("timedout_in_paxos_accept");
            } else {
                // 21: cmdsL[L][i] <- (cmd, seq, deps, committed)
                cmds[self][iL]["status"] = "COMMITTED";

                // 22: send commit notification for cmd to client

                // 23: send Commit(cmd, seq, deps, L.i) to all other replicas
                for (peer in replicas) {
                    if (peer != self) {
                        rpc_async_call(peer, Commit(self, cmd, key, seq, deps, iL)); 
                    }
                }
            }
        }

        return true;
    }

    func PreAccept(sender, cmd, key, seq, deps, iL) -> bool {

        // 6: update seq <- max({seq} UNION {seq nums from all dependencies on this replica})
        // 7: update deps <- deps UNION Interf
        var seqR = 1;
        for (replica = 0; replica < len(cmds); replica = replica + 1) {
            for (inst_num = 0; inst_num < len(cmds[replica]); inst_num = inst_num + 1) {
                var log = {};
                log = cmds[replica][inst_num];
                if (("key" exists log) && (log["key"] == key)) {
                    if (!(inst_num exists (deps[replica]))) {
                        deps[replica][inst_num] = {
                            "cmd": log["cmd"],
                            "seq": log["seq"],
                            "key": log["key"]
                        };
                    }
                    if (log["seq"] >= seqR) {
                        seqR = log["seq"] + 1;
                    }
                }
            }
        }
        if (seqR > seq) {
            seq = seqR;
        }

        // 8: cmdsR[L][i] <- (cmd, seq, deps, pre-accepted)
        for (placeholder = 0; len(cmds[sender]) <= iL; placeholder = 0) {
            cmds[sender] = append(cmds[sender], {});
        }
        // TODO there's something here about an epoch number that I'm completely ignoring
        cmds[sender][iL] = {   
            "cmd": cmd,
            "seq": seq,
            "deps": deps,
            "status": "PREACCEPTED",
            "key": key
        };
        
        // 9: reply PreAcceptOk(cmd, seq, deps, L.i) to L
        return {
            "type": "PreAcceptOK",
            "cmd": cmd,
            "seq": seq,
            "deps": deps,
            "instance_num": iL,
            "sender": self
        };
    }

    func Commit(sender, cmd, key, seq, deps, iL) -> None {
        for (placeholder = 0; len(cmds[sender]) <= iL; placeholder = 0) {
            cmds[sender] = append(cmds[sender], {});
        }

        cmds[sender][iL] = {
            "cmd": cmd,
            "seq": seq,
            "deps": deps,
            "status": "COMMITTED",
            "key": key
        };
    }

    func Accept(sender, cmd, key, seq, deps, iL) -> Map {
        cmds[sender][iL]["seq"] = seq;
        cmds[sender][iL]["deps"] = deps;
        cmds[sender][iL]["status"] = "ACCEPTED";

        return {
            "cmd": cmd,
            "key": key,
            "iL": iL
        };
    }
}

ClientInterface {

    func init(dest, replicas) -> None {
        rpc_call(dest, BASE_NODE_INIT());
        rpc_async_call(dest, Init(dest, replicas));
    }

    func newEntry(dest, cmd, key) -> bool {
        rpc_async_call(dest, NewEntry(cmd, key));
    }
}