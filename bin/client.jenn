Node(head) {
	map<Key, Value> db = {};
	Node successor = Options(Mid, Tail);

	func Read(key) -> val {
		if (db[key].isDirty) {
			val = rpc_call(tail, Read(key));
			return val;
		} else {
			return db[key];
		}
	}
	
	func Write(key, val) -> none {
		db[key] = val;
		db[key].isDirty = true;
		rpc_call(next, write(key, val));
		db[key].isDirty = false;
	}
}

Node(Mid) {
	map<Key, Value> db = {};
	Node predecessor = Options(Head, node);
	Node successor = Options(Mid, Tail);

	func Read(Key)->Val {
		if (db[key].isDirty) {
			val = rpc_call(Tail, Read(key));
			return val;
		} else {
			return db[key];
		} 
	}

	func write(key, val) -> none {
		db[key] = val;
		db[key].isDirty = true;
		rpc_call(successor, write(key, val));
		db[key].isDirty = false;
	}
}

Node(Tail) {
	map<Key, Value> db = {};
	Node predecessor = Options(Head, Mid);	

	func Read(key)->val {
		return db[key];
	}

	func write(key, val) -> none {
		db[key] = val;
		db[key].isDirty = false;
	}
}

ClientInterface {

	func Read(key) -> val {
		dest = Options(Head, Mid, Tail);
		val = rpc_call(dest, Read(key));
		return val;
	}

	func Write(key, val) -> none {
		rpc_call(Head, Write(key, val));
	}
}